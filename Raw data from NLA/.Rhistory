plot(LCBD, (NTW[,'mod.avg.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
NTW
NTW$SITE_ID[1:5]
data_sp_site <- dcast(data_bm,SITE_ID ~ TAXANAME, value.var="BIOMASS",fun=mean,fill=0)
data_sp_site$SITE_ID[1:5]
stats[aux, ]
aux
LCBD[aux,]
LCBD
data <- full[!is.na(full$BIOMASS),]
data_sp_site <- dcast(data_bm,SITE_ID ~ TAXANAME, value.var="BIOMASS",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
colnames(NTW)
NTW$LAKE_ORIGIN <- as.factor(NTW$LAKE_ORIGIN)
data_sp_site$SITE_ID[1:10]
NTW$SITE_ID[1:10]
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW
NTW$SITE_ID[1:10]
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$SITE_ID[1:10]
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
data_sp_site$SITE_ID[1:10]
data <- read.csv("../Clean data/full_rough.csv", as.is=TRUE)
data <- full[!is.na(full$BIOMASS),]
data_sp_site <- dcast(data_bm,SITE_ID ~ TAXANAME, value.var="BIOMASS",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
data_sp_site <- dcast(data_bm,SITE_ID ~ TAXANAME, value.var="BIOMASS",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
NTW$SITE_ID[1:10]
data_sp_site$SITE_ID[1:10]
sort(NTW$SITE_ID[1:10])
unique(NTW$SITE_ID)
unique(data_sp_site$SITE_ID)
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
colnames(NTW)
NTW$SITE_ID
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
NTW$SITE_ID
data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')]
unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW[aux,]
NTW[aux,][1]
NTW[aux,][1:10]
NTW[aux,][1:10,]
stats[aux, ][1:10]
data_sp_site[aux,][1:10]
data_sp_site[aux,][1:10,]
NTW = cbind(NTW[aux,], mod = stats[aux, ])
colnames(NTW)
NTW$LAKE_ORIGIN <- as.factor(NTW$LAKE_ORIGIN)
par(mfrow=c(1,3))
plot(log(NTW[,'PTL']), (NTW[,'mod.mod']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.mod']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL_PTL']), (NTW[,'mod.mod']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'PTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL_PTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
data_sp_site <- data_sp_site[aux,]
data_sp_site$SITE_ID[1:10]
NTW$SITE_ID[1:10]
NTW[aux,]$SITE_ID[1:10]
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
names(NTW[aux,])
which(NTW[,'SITE_ID']==data_sp_site[,'SITE_ID'])
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
data_sp_site[,'SITE_ID']
NTW[,'SITE_ID']
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
colnames(NTW)
data_sp_site <- data_sp_site[aux,]
data_sp_site$SITE_ID[1:10]
NTW$SITE_ID[1:10]
data_sp_site <- data_sp_site[,-c(1)] # remove SITE_ID column
mat.chord <- decostand(data_sp_site,"normalize")
s <- scale(mat.chord, center=TRUE, scale=FALSE)^2
SStotal <- sum(s)
BD <- SStotal/(ncol(s)-1)
LCBD <- apply(s, 1, sum)/SStotal
SCBD <- apply(s,2,sum)/SStotal
x <- seq(1:length(LCBD))
y <- rep(1,length(LCBD))
plot(x,y,cex=LCBD*50,pch=19,col="firebrick2")
x <- seq(1:length(SCBD))
y <- rep(1,length(SCBD))
plot(x,y,cex=SCBD*20,pch=19,col="firebrick2")
sort(SCBD*20,decreasing=T)[1:6]
plot(LCBD, (NTW[,'mod.avg.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
LCBD
LCBD[aux,]
head(data_sp_site)
head(data_sp_site)[1:2]
length(LCBD)
length(NTW[,'mod.avg.clust.size'])
NTW = cbind(NTW,LCBD)
plot(LCBD, log(NTW[,'mod.avg.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
head(LCBD)
head(NTW)
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
is.na(NTW$LCBD)
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'])
NTW$LAKE_ORIGIN <- as.factor(NTW$LAKE_ORIGIN)
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'LCBD']), (NTW[,'mod.mod']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'LCBD']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'LCBD']), (NTW[,'mod.no.clust']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'LCBD']), (NTW[,'mod.max.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'LCBD']), (NTW[,'mod.avg.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
NTW[,'LCBD']
plot(NTW[,'LCBD']~NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'mod.avg.clust.size'],NTW[,'LCBD'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.mod'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.edge'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.clust'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
data <- read.csv("../Clean data/full_rough.csv", as.is=TRUE)
data_sp_site <- dcast(data_bm,SITE_ID ~ TAXANAME, value.var="abund_ml",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
colnames(NTW)
NTW$LAKE_ORIGIN <- as.factor(NTW$LAKE_ORIGIN)
data_sp_site <- data_sp_site[aux,]
data_sp_site <- data_sp_site[,-c(1)] # remove SITE_ID column
mat.chord <- decostand(data_sp_site,"normalize")
s <- scale(mat.chord, center=TRUE, scale=FALSE)^2
SStotal <- sum(s)
BD <- SStotal/(ncol(s)-1)
LCBD <- apply(s, 1, sum)/SStotal
SCBD <- apply(s,2,sum)/SStotal
x <- seq(1:length(LCBD))
y <- rep(1,length(LCBD))
plot(x,y,cex=LCBD*50,pch=19,col="firebrick2")
x <- seq(1:length(SCBD))
y <- rep(1,length(SCBD))
plot(x,y,cex=SCBD*20,pch=19,col="firebrick2")
NTW = cbind(NTW,LCBD)
plot(NTW[,'LCBD'],NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.mod'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.edge'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.clust'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'LCBD']), (NTW[,'mod.max.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.max.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
sort(SCBD*20,decreasing=T)[1:6]
plot(x,y,cex=LCBD*100,pch=19,col="firebrick2")
plot(x,y,cex=LCBD*1000,pch=19,col="firebrick2")
plot(x,y,cex=LCBD*10^6,pch=19,col="firebrick2")
plot(x,y,cex=LCBD*10^4,pch=19,col="firebrick2")
plot(x,y,cex=LCBD*10^3,pch=19,col="firebrick2")
plot(x,y,cex=LCBD*2000,pch=19,col="firebrick2")
plot(x,y,cex=LCBD,pch=19,col="firebrick2")
plot(x,y,cex=LCBD*50,pch=19,col="firebrick2")
plot(x,y,cex=SCBD*20,pch=19,col="firebrick2")
sort(SCBD*20,decreasing=T)[1:10]
sort(SCBD*20,decreasing=T)[1:20]
sort(LCBD*20,decreasing=T)[1:20]
data <- phyto
head(phyto)
phyto <- read.csv("../Raw data from NLA/CONTEMPPHYTO.csv", as.is=T)
phyto <- phyto[-grep("diatom",phyto$TAXATYPE,ignore.case=TRUE),]
phyto$MESH_SIZE <- rep(NA, nrow(phyto))
phyto$T_GROUP<-"Phytoplankton"
names(phyto)[which(names(phyto)=='ABUND')]<-'abund_ml'
phyto <- phyto[,col.subset]
data <- phyto
names(phyto)
str(phyto)
data <- phyto[!is.na(phyto$BIOVOLUME),]
data_sp_site <- dcast(data_bm,SITE_ID ~ TAXANAME, value.var="BIOVOLUME",fun=mean,fill=0)
data_sp_site <- dcast(data,SITE_ID ~ TAXANAME, value.var="BIOVOLUME",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
phyto <- read.csv("../Raw data from NLA/CONTEMPPHYTO.csv", as.is=T)
phyto <- phyto[-grep("diatom",phyto$TAXATYPE,ignore.case=TRUE),]
phyto$MESH_SIZE <- rep(NA, nrow(phyto))
phyto$T_GROUP<-"Phytoplankton"
names(phyto)[which(names(phyto)=='ABUND')]<-'abund_ml'
col.subset <- c("SITE_ID","VISIT_NO","SAMPLE_CATEGORY","GENUS","TAXANAME","abund_ml","MESH_SIZE", "T_GROUP", "TAXATYPE","BIOVOLUME",
"PTL","NTL","LAKE_ORIGIN")
phyto <- phyto[,col.subset]
phyto <- read.csv("../Raw data from NLA/CONTEMPPHYTO.csv", as.is=T)
phyto <- phyto[-grep("diatom",phyto$TAXATYPE,ignore.case=TRUE),]
phyto$MESH_SIZE <- rep(NA, nrow(phyto))
phyto$T_GROUP<-"Phytoplankton"
names(phyto)[which(names(phyto)=='ABUND')]<-'abund_ml'
names(phyto)
phyto <- read.csv("../Raw data from NLA/CONTEMPPHYTO.csv", as.is=T)
col.subset <- c("SITE_ID","VISIT_NO","SAMPLE_CATEGORY","GENUS","TAXANAME","abund_ml","MESH_SIZE", "T_GROUP", "TAXATYPE","BIOVOLUME")
phyto <- phyto[-grep("diatom",phyto$TAXATYPE,ignore.case=TRUE),]
phyto$MESH_SIZE <- rep(NA, nrow(phyto))
phyto$T_GROUP<-"Phytoplankton"
names(phyto)[which(names(phyto)=='ABUND')]<-'abund_ml'
phyto <- phyto[,col.subset]
data <- read.csv("../Clean data/full_rough.csv", as.is=TRUE)
names(data)
unique(full$TAXATYPE)
phyto <- full[TAXATYPE=="Blue-Green Algae",]
phyto <- full[full$TAXATYPE=="Blue-Green Algae",]
names(phyto)
# Need: Clean data, Network metrics, ways to fit alternative responses (linear vs. stable state)
setwd("~/Dropbox/Network SBEX/Raw data from NLA")
##  Data sources
phyto <- read.csv("../Raw data from NLA/CONTEMPPHYTO.csv", as.is=T)
diatom <- read.csv("../Raw data from NLA/CONTEMPDIATOMS.csv", as.is=T)
zoo <- read.csv("../Raw data from NLA/CONTEMPZOO.csv", as.is=T)
lakewater = read.csv('../Raw data from NLA/LAKEWATERQUAL.csv', as.is=TRUE)
lake <- read.csv("../Raw data from NLA/LAKEINFO.csv", as.is=T)
## Columns of final data set
col.subset <- c("SITE_ID","VISIT_NO","SAMPLE_CATEGORY","GENUS","TAXANAME","abund_ml","MESH_SIZE", "T_GROUP", "TAXATYPE","BIOVOLUME")
## ZOOPLANKTON
zoo$abund_samp <- (zoo$ABUND/zoo$VOL_COUNT)*zoo$INIT_VOL
zoo$d <- pi*(0.0635)^2*zoo$DEPTH_OF_TOW
zoo$abund_ml <- (zoo$abund_samp/zoo$d)
zoo$TAXATYPE <- "zooplankton"
zoo$T_GROUP <- rep('Zooplankton', nrow(zoo))
zoo$BIOVOLUME <- rep(NA, nrow(zoo))
zoo <- zoo[,col.subset]
## PHYTOPLANKTON
## remove diatoms
phyto <- phyto[-grep("diatom",phyto$TAXATYPE,ignore.case=TRUE),]
phyto$MESH_SIZE <- rep(NA, nrow(phyto))
phyto$T_GROUP<-"Phytoplankton"
names(phyto)[which(names(phyto)=='ABUND')]<-'abund_ml'
phyto <- phyto[,col.subset]
## DIATOM
diatom$abund_ml <- diatom$COUNT/diatom$CONC_VOL
diatom$TAXATYPE <- "Diatoms"
diatom$MESH_SIZE <- rep(NA, nrow(diatom))
diatom$T_GROUP<-rep("Phytoplankton",nrow(diatom))
diatom$BIOVOLUME<-rep(NA,nrow(diatom))
diatom <- diatom[,col.subset]
# Combining condensed dataframes
full <- rbind(zoo, phyto, diatom)
# Subsetting only first visit to each site
full <- full[full$VISIT_NO==1,]
# Using only the SAMPLE_CATEGORY=="P"
full <- full[full$SAMPLE_CATEGORY=="P",]
# Removing rows with NA in SITE_ID and abund_ml, and abund_ml==0
full <- full[!is.na(full$abund_ml),]
full <- full[full$abund_ml>0,]  # Note (Zofia): I don't think we should delete abund_ml==0!
## remove 243 form MESH_SIZE
full<-full[-which(full$MESH_SIZE==243),]
## Removing empty TAXANAME and TAXATYPE
full<-full[-which(full$TAXANAME==""),]
full<-full[-which(full$TAXATYPE==""),]
dim(full)# 44343 rows
##  Merging PTL and PTL
id_col = paste0(lakewater$SITE_ID, lakewater$VISIT_NO, lakewater$SAMPLE_CATEGORY)
## Matching PTL and NTL form lakewater to data
aux  = sapply(paste0(full$SITE_ID, full$VISIT_NO, full$SAMPLE_CATEGORY),
function(r){
aux = which(r==id_col)
c(NTL = unique(lakewater[aux,'NTL'])[1],
PTL = unique(lakewater[aux,'PTL'])[1]) })
full = cbind(full, t(aux))
#### adding lake origin and lon/lat
## LAKE_ORIGIN<-LON_DD<-LAT_DD<-numeric(nrow(full))
## lake.mat<-matrix(nrow=nrow(full),ncol=4)
## lake.mat<-as.data.frame(lake.mat)
## lake.mat[,c(1:4)]<-c(full$SITE_ID,LAKE_ORIGIN,LON_DD,LAT_DD)
## colnames(lake.mat)<-c("SITE_ID","LAKE_ORIGIN","LON_DD","LAT_DD")
## lake2<-lake[,c("SITE_ID","LAKE_ORIGIN","LON_DD","LAT_DD")]
## for(i in 1:nrow(lake.mat)){
##   ind<-which(lake$SITE_ID==lake.mat[i,1])[1]
##   lake.mat[i,c(2,3,4)]<-lake2[ind,c(2,3,4)]
## }
## new code to add lake lon/lat
aux <- sapply(full$SITE_ID, function(r)  which(r==lake$SITE_ID)[1])
full <- cbind(full, lake[aux,c('LAKE_ORIGIN', 'LON_DD', 'LAT_DD')])
### Converting abund/ml data into biomass data
full$biomass_ind <- rep(NA,nrow(full))
# 1. Applying conversion factors for specific zooplankton
full$biomass_ind[full$TAXANAME=="Ascomorpha"] <- 0.0177
full$biomass_ind[full$TAXANAME=="Bosmina"] <- 1.577
full$biomass_ind[full$TAXANAME=="Calanoida"] <- 4.2075
full$biomass_ind[full$TAXANAME=="Collotheca"] <- 0.0001
full$biomass_ind[full$TAXANAME=="Collothecidae"] <- 0.0001
full$biomass_ind[full$TAXANAME=="Ceriodaphnia"] <- 0.7107
full$biomass_ind[full$TAXANAME=="Chydoridae"] <- 1.0742
full$biomass_ind[full$TAXANAME=="Cyclopidae"] <- 2.7266
full$biomass_ind[full$TAXANAME=="Daphnia ambigua"] <- 3.332
full$biomass_ind[full$TAXANAME=="Daphnia mendotae complex"] <- 8.1962
full$biomass_ind[full$TAXANAME=="Daphnia retrocurva"] <- 2.599
full$biomass_ind[full$TAXANAME=="Diaphanosoma"] <- 2.8804
full$biomass_ind[full$TAXANAME=="Diaptomidae"] <- 3.311
full$biomass_ind[full$TAXANAME=="Filinia"] <- 0.0235
full$biomass_ind[full$TAXANAME=="Gastropus"] <- 0.00956
full$biomass_ind[full$TAXANAME=="Kellicottia"] <- 0.0044
full$biomass_ind[full$TAXANAME=="Kellicottia bostoniensis"] <- 0.0044
full$biomass_ind[full$TAXANAME=="Kellicottia longispina"] <- 0.0044
full$biomass_ind[full$TAXANAME=="Keratella hiemalis"] <- 0.0375
full$biomass_ind[full$TAXANAME=="Keratella quadrata"] <- 0.074
full$biomass_ind[full$TAXANAME=="Notholca"] <- 0.0061
full$biomass_ind[full$TAXANAME=="Ploesoma"] <- 0.0225
full$biomass_ind[full$TAXANAME=="Polyarthra"] <- 0.0378
full$biomass_ind[full$TAXANAME=="Pompholyx"] <- 0.0209
full$biomass_ind[full$TAXANAME=="Synchaeta"] <- 0.0409
# 2. Phytoplankton biovolumes were converted to dry biomass (μg/L) assuming a specific gravity of 1 and
# a dry mass to wet mass ratio of 0.10.
full$BIOMASS <- 0.1*full$BIOVOLUME # so far zooplankton data has NAs so not affected by conversion
# Convert to µg/ml (divide by 1000)
full$BIOMASS <-  0.001*full$BIOMASS
# 3. Phytoplankton BIOVOLUME = CELL_VOLUME * ABUND
# where CELL_VOLUME is the taxa specific biovolume (µm^3 cell/mL water) and ABUND = COUNT/mL
# Therefore, for zooplankton take biomass/indiv. (µg/ 1 count) x the abund_ml (count/ mL) column
# to obtain total biomass in µg/ mL.
full$BIOMASS[full$TAXATYPE=="zooplankton"] <- full$biomass_ind[full$TAXATYPE=="zooplankton"] * full$abund_ml[full$TAXATYPE=="zooplankton"]
# Odd that phytoplankton biomass is still much greater than zooplankton biomass!
col.subset <- c("SITE_ID","VISIT_NO","SAMPLE_CATEGORY","GENUS","TAXANAME","abund_ml","MESH_SIZE", "T_GROUP", "TAXATYPE",
"NTL", "PTL", "LAKE_ORIGIN", "LON_DD", "LAT_DD", "BIOMASS","BIOVOLUME")
full <- full[,col.subset]
phyto <- full[full$TAXATYPE=="Blue-Green Algae",]
names(phyto)
data <- phyto[!is.na(phyto$BIOVOLUME),]
data_sp_site <- dcast(data,SITE_ID ~ TAXANAME, value.var="BIOVOLUME",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
colnames(NTW)
NTW$LAKE_ORIGIN <- as.factor(NTW$LAKE_ORIGIN)
data_sp_site <- data_sp_site[aux,]
data_sp_site$SITE_ID[1:10]
NTW$SITE_ID[1:10]
data_sp_site <- data_sp_site[,-c(1)] # remove SITE_ID column
mat.chord <- decostand(data_sp_site,"normalize")
s <- scale(mat.chord, center=TRUE, scale=FALSE)^2
SStotal <- sum(s)
BD <- SStotal/(ncol(s)-1)
LCBD <- apply(s, 1, sum)/SStotal
SCBD <- apply(s,2,sum)/SStotal
x <- seq(1:length(LCBD))
y <- rep(1,length(LCBD))
plot(x,y,cex=LCBD*50,pch=19,col="firebrick2")
x <- seq(1:length(SCBD))
y <- rep(1,length(SCBD))
plot(x,y,cex=SCBD*20,pch=19,col="firebrick2")
sort(SCBD*20,decreasing=T)[1:20]
sort(LCBD*20,decreasing=T)[1:20]
NTW = cbind(NTW,LCBD)
plot(NTW[,'LCBD'],NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.mod'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.edge'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.clust'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.max.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size) + geom_point() + geom_smooth()
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size)) + geom_point() + geom_smooth()
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size)) + geom_point() + geom_smooth()
library(ggplot2)
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size)) + geom_point() + geom_smooth()
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size)) + geom_point() + geom_smooth(method='lm')
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size)) + geom_point() + geom_smooth(aes(x=LCBD,y=mod.avg.clust.size))
ggplot(data=NTW, aes(x=LCBD,y=mod.avg.clust.size)) + geom_point()
NTW$mod.avg.clust.size
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_point()
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_point() + geom_smooth()
library(mgcv)
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_point() + geom_smooth()
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_point() + geom_smooth(method="lm")
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size,col=LAKE_ORIGIN))) + geom_point() + geom_smooth(method="lm")
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size,color=LAKE_ORIGIN))) + geom_point()
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_point(aes(color=LAKE_ORIGIN))
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_boxplot(aes(color=LAKE_ORIGIN))
ggplot(data=NTW, aes(x=LCBD,y=as.numeric(mod.avg.clust.size))) + geom_point()
plot(NTW[,'LCBD'], NTW[,'NTL'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot( log(NTW[,'NTL']), NTW[,'LCBD'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot( log(NTW[,'PTL']), NTW[,'LCBD'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.mod'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.clust'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.max.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(x,y,cex=LCBD*50,pch=19,col="firebrick2")
makenetwork <- function(spe, threshold, groups, plot= FALSE){
##  Makeing network per site based on relative abundance.
if(missing(threshold)) threshold =0
spe = spe %*% t(spe)
## set diagonal to 0 (self-interaction)
diag(spe) <- 0
## spe = 1*(spe>threshold)
## Creating the graph
ig = graph.adjacency(spe, mode= "undirected", weighted = TRUE)
ly = make_layout(ig, groups)
deg  = degree(ig)
deg[deg>0] <- 6
deg = deg + 2
if(plot)
plot(ig, layout=20*ly,
vertex.size=deg, vertex.label.dist=0.5,
edge.arrow.mode="-",vertex.color=groups,
vertex.label=NA, edge.color="blue", edge.width= 50*E(ig)$weight)
## title("Abund dist")
list(mod = modularity(x = ig, membership=groups, weights =E(ig)$weight),
no.edge = ecount(ig),
e.density = ecount(ig)/(ecount(ig)*(ecount(ig)-1)/2)*100, # realized/ total
# avg.path = average.path.length(ig),
no.clust = no.clusters(ig),
max.clust.size = max(clusters(ig)$csize),
connectance = vcount(ig)/(ecount(ig))^2, # from Coll et al. (2011) Table 2
# transit = transitivity(ig),
# l.density = vcount(ig)/ecount(ig), # from Coll et al. (2011) Table 2
avg.clust.size = mean(clusters(ig)$csize))
}
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
phyto <- full[full$TAXATYPE=="Blue-Green Algae",]
data <- phyto[!is.na(phyto$BIOMASS),]
data_sp_site <- dcast(data,SITE_ID ~ TAXANAME, value.var="BIOMASS",fun=mean,fill=0)
re_data_sp_site = t(apply(data_sp_site[,-1],1,  function(r) r /sum(r)))
groups = sapply(colnames(data_sp_site)[-1], function(r)  data$TAXATYPE[which(r == data$TAXANAME)[1]] )
groups = as.numeric(factor(groups))
stats = apply(re_data_sp_site, 1, function(r,g) makenetwork(r, groups=g), g= groups)
stats = do.call(rbind, stats)
NTW = unique(data[,c('SITE_ID', 'PTL', 'NTL','LAKE_ORIGIN')])
NTW$NTL_PTL = NTW$NTL/NTW$PTL
aux = sapply(NTW[,'SITE_ID'], function(r) which(r==data_sp_site[,'SITE_ID']))
NTW = cbind(NTW, mod = stats[aux, ])
colnames(NTW)
NTW$LAKE_ORIGIN <- as.factor(NTW$LAKE_ORIGIN)
data_sp_site <- data_sp_site[aux,]
data_sp_site <- data_sp_site[,-c(1)] # remove SITE_ID column
mat.chord <- decostand(data_sp_site,"normalize")
s <- scale(mat.chord, center=TRUE, scale=FALSE)^2
SStotal <- sum(s)
BD <- SStotal/(ncol(s)-1)
LCBD <- apply(s, 1, sum)/SStotal
SCBD <- apply(s,2,sum)/SStotal
x <- seq(1:length(LCBD))
y <- rep(1,length(LCBD))
plot(x,y,cex=LCBD*50,pch=19,col="firebrick2")
x <- seq(1:length(SCBD))
y <- rep(1,length(SCBD))
plot(x,y,cex=SCBD*20,pch=19,col="firebrick2")
NTW = cbind(NTW,LCBD)
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.connectance'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], log(NTW[,'mod.connectance']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
NTW[,'mod.connectance']
as.numeric(NTW[,'mod.connectance']
)
as.numeric(NTW[,'mod.connectance'])
NTW[,'mod.connectance']
plot(log(NTW[,'NTL']), (NTW[,'mod.max.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'PTL']), (NTW[,'mod.max.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.clust']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.mod']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot((NTW[,'NTL']), (NTW[,'mod.no.clust']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot((NTW[,'NTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot((NTW[,'NTL']), (NTW[,'mod.mod']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot((NTW[,'NTL']), (NTW[,'mod.max.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot((NTW[,'PTL']), (NTW[,'mod.avg.clust.size']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.clust']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.clust']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(log(NTW[,'NTL']), (NTW[,'mod.no.edge']), col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.avg.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.mod'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.edge'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.no.clust'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
plot(NTW[,'LCBD'], NTW[,'mod.max.clust.size'], col=NTW[,'LAKE_ORIGIN'], pch=as.numeric(NTW[,'LAKE_ORIGIN']))
